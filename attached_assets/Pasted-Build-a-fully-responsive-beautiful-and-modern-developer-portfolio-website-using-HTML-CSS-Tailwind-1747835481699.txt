Build a fully responsive, beautiful and modern developer portfolio website using HTML, CSS (TailwindCSS or SCSS), JavaScript (preferably React), and smooth animation libraries like Framer Motion or GSAP.

The site should have a synergized color scheme and immaculate design, making use of gradients, subtle shadows, and spacing to create a high-end aesthetic. Use modular components and follow a clean design system.

The site should include the following pages or sections:

1. Landing Page / Home
A large hero section with a placeholder for a user-uploaded profile picture.

Animated intro or tagline (e.g., “Hi, I'm Eesar Hussain, a Full-stack Web developer”).

Call-to-action buttons linking to "About Me", "Projects", "Contact".

2. About Me Page
Full description about the person (include placeholder text).

Add sections for skills, experience, education, and achievements.

Use icons and horizontal timelines where appropriate.

3. Projects Page
Showcase several projects with images, descriptions, tech used, and links to GitHub/live demo.

Use cards with hover animations and modal popups if needed.

4. Testimonials Page
Rotating or grid-style client testimonials (use sample data).

Include names, short messages, client roles, and photos (placeholders).

5. Contact Page
Form with fields (name, email, message).

Include Google Maps iframe and email/contact info.

6. Resume
A "Download CV" button linked to a downloadable PDF.

7. Navigation
Sticky navigation bar with smooth scroll and animated page transitions (no full-page reloads).

Highlight the active section.

8. Other Requirements
Fully responsive (desktop, tablet, mobile).

Placeholders for user-uploadable images.

All social media links (GitHub, LinkedIn, Twitter, Instagram, etc.) with relevant icons.

Smooth transitions and animations for all interactive elements.

Light/dark mode toggle.

Add dummy blog or “Spaces” section if possible, with option to sort by date or category.

Use CSS variables or utility classes for easy customization.

Use dummy text and replaceable assets so the user can update content and images easily. Use best practices for accessibility, clean code, and performance.